1.meshvp
1234


2. maanp
    1234

3. Asha
    1234

4. Upendra 
    1234



Bug
    Comment
    
    Snackbar compo

    


    {
  "_id": "6245c9a799b2268d8bccc49e",
  "username": "maanp",
  "email": "maan",
  "number": 0,
  "Profile_pic": "https://res.cloudinary.com/dqveulwdc/image/upload/v1653151530/ehb63t4kg1x3ptusht9x.png",
  "saved_blogs": [],
  "user": "6245c9a799b2268d8bccc49c",
  "createdAt": "2022-03-31T15:32:55.742Z",
  "updatedAt": "2022-05-21T16:45:31.216Z",
  "__v": 6,
  "followers": [
    "6245cdd699b2268d8bccc4ce",
    "6245c68299b2268d8bccc47d"
  ],
  "following": []
}


{"result":true,"authToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyNDVjOWE3OTliMjI2OGQ4YmNjYzQ5YyIsInVzZXJuYW1lIjoibWFhbnAiLCJpYXQiOjE2NTMxNTE3NTd9.Xr7DY8_5bRn4QIQwK3MpIZzg-ss_EqHERdUF4nr8-No","profile":{"_id":"6245c9a799b2268d8bccc49e","username":"maanp","email":"maan","number":0,"Profile_pic":"https://res.cloudinary.com/dqveulwdc/image/upload/v1653151530/ehb63t4kg1x3ptusht9x.png","saved_blogs":[],"user":"6245c9a799b2268d8bccc49c","createdAt":"2022-03-31T15:32:55.742Z","updatedAt":"2022-05-21T16:45:31.216Z","__v":6,"followers":["6245cdd699b2268d8bccc4ce","6245c68299b2268d8bccc47d"],"following":[]}}





 // This is what our customer data looks like.
        const customerData = [
            {ssn: "444-44-4444", name: "Bill", age: 35, email: "bill@company.com"},
            {ssn: "555-55-5555", name: "Donna", age: 32, email: "donna@home.org"}
        ];

        const dbName = "the_name";

        var request = indexedDB.open(dbName, 2);

        request.onerror = event => {
            // Handle errors.
        };
        request.onupgradeneeded = event => {
            var db = event.target.result;

            // Create an objectStore to hold information about our customers. We're
            // going to use "ssn" as our key path because it's guaranteed to be
            // unique - or at least that's what I was told during the kickoff meeting.
            var objectStore = db.createObjectStore("customers", {keyPath: "ssn"});

            // Create an index to search customers by name. We may have duplicates
            // so we can't use a unique index.
            objectStore.createIndex("name", "name", {unique: false});

            // Create an index to search customers by email. We want to ensure that
            // no two customers have the same email, so use a unique index.
            objectStore.createIndex("email", "email", {unique: true});

            // Use transaction oncomplete to make sure the objectStore creation is
            // finished before adding data into it.
            objectStore.transaction.oncomplete = event => {
                // Store values in the newly created objectStore.
                var customerObjectStore = db.transaction("customers", "readwrite").objectStore("customers");
                customerData.forEach(function (customer) {
                    customerObjectStore.add(customer);
                });
            };
        };